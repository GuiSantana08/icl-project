options {
  STATIC=false;
}

PARSER_BEGIN(Parser)

package parser;
import ast.*; import ast.value.*; import ast.operations.arithmetic.*;
import ast.operations.relational.*; import ast.control.*; import ast.operations.references.*;
import ast.functions.*;
import symbols.Tuple; import java.util.List;import java.util.ArrayList;

public class Parser {

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN :
{
     < Num: (["0"-"9"]) + >
  |  < PLUS : "+" >
  |  < MINUS : "-">
  |  < TIMES : "*">
  |  < DIV : "/">
  |  < LPAR : "(" >
  |  < RPAR : ")" >
  |  < EF: ";;" >
  |  < SEMCOL : ";" >
  |  < BOOL : ("true" | "false") >
  |  < EQUALS : "=" >
  |  < EQREL : "==">
  |  < GT : ">">
  |  < GEQT : ">=">
  |  < LT : "<">
  |  < LEQT : "<=">
  |  < DIFF : "!=">
  |  < DEREF : "!">
  |  < AND : "&&">
  |  < OR : "||">
  |  < LET : "let">
  |  < IF : "if">
  |  < THEN : "then">
  |  < ELSE : "else">
  |  < END: "end">
  |  < WHILE : "while">
  |  < DO : "do">
  |  < IN : "in">
  |  < NEW : "new">
  | < FUN : "fun">
  | < FUNTYPE : ":">
  | < TYPE : "int" | "bool"  > //TODO: add fun type
  | < ARROWRIGHT : "->" >
  |  < NOT : "~">
  |  <PRINT : "print">
  |  <PRINTLN : "println">
  |  < ATRIB : ":=">
  |  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
}

ASTNode Start():
{ ASTNode e; }
{
   e = Seq() <EF>  { return e; }
}


ASTNode Seq():
{ ASTNode e1, e2; }
{
    e1 = SeqE()
    ( <SEMCOL> e2 = Seq() { e1 = new ASTSeq(e1,e2); })*

    { return e1; }
}



ASTNode SeqE():
{ ASTNode e1, e2; }
{
    e1 = Decl()
     (<ATRIB> e2 = Decl() { e1 =  new ASTReff(e1, e2); })*

    { return e1; }
}


ASTNode Decl():
{ ASTNode e, body;
  Token x;
  List<Tuple<String, ASTNode>> vars = new ArrayList<Tuple<String, ASTNode>>(); }
{
    (
    (
        <LET> (
            x = <Id> <EQUALS> (e = BoolOps())
            { vars.add(new Tuple<String, ASTNode>(x.image, e)); }
        )+
        <IN> body = SeqE() { e = new ASTLet(vars, body); }
    ) | e = BoolOps() )
    { return e; }
}




ASTNode BoolOps():
{ASTNode e1, e2;}
{
    (
    e1 = CmpOps()
    ( <AND> e2 = BoolOps() { e1 = new ASTAnd(e1,e2); }
    | <OR> e2 = BoolOps() { e1 = new ASTOr(e1,e2); } )*
    | <NOT> e2 = BoolOps() { e1 = new ASTNot(e2); })
    { return e1; }
}

ASTNode CmpOps():
{ASTNode e1, e2;}
{
    e1 = Expr()
    [ <EQREL> e2 = CmpOps() { e1 = new ASTEq(e1,e2); }
    | <GT> e2 = CmpOps() { e1 = new ASTGt(e1,e2); }
    | <GEQT> e2 = CmpOps() { e1 = new ASTGeq(e1,e2); }
    | <LT> e2 = CmpOps() { e1 = new ASTLt(e1,e2); }
    | <LEQT> e2 = CmpOps() { e1 = new ASTLeq(e1,e2); }
    | <DIFF> e2 = CmpOps() { e1 = new ASTDiff(e1,e2); }]
    { return e1; }

}


ASTNode Expr() :
{ ASTNode e1, e2; }
{
   e1 = Term() 
     ( <PLUS> e2 = Expr() { e1 = new ASTAdd(e1,e2); }
     | <MINUS> e2 = Expr() { e1 = new ASTSub(e1,e2); } )*
     { return e1; }
}

ASTNode Term() :
{ ASTNode e1, e2; }
{
     e1 = Call()
     ( <TIMES> e2 = Term() { e1 = new ASTMult(e1,e2); }
     | <DIV> e2 = Term() { e1 = new ASTDiv(e1,e2); } )*

     { return e1; }
}

ASTNode Call() :
{ASTNode e;}
{
    e = fcall()
    { return e; }
}

ASTNode Fact() :
{ASTNode e;}
{
    (
        <DEREF> e = Fact() { e = new ASTDRef(e); }
        | <PRINT> e = Fact() { e = new ASTPrint(e); }
        | <PRINTLN> e = Fact() { e = new ASTPrintln(e); }
        | e = ifElse()
        | e = whileLoop()
        |  e = Num()
        | e = Id()
        | e = Bool()
        | e = DefFun()
        | <LPAR> e = Seq() <RPAR>
        | <NEW> e = BoolOps() { e = new ASTNew(e); })
    { return e; }
 }


 ASTNode fcall()  :
 {ASTNode e;}
 {
     e=Fact() (e=gets(e))*
     {return e;}
 }

 ASTNode gets(ASTNode exp) :
 {ASTNode e1,e2;
  List<ASTNode> args = new ArrayList<ASTNode>();}
 {

     <LPAR> e2 = Expr() {args.add(e2); }
     ("," e2 = Expr() { args.add(e2); })* <RPAR>
     { return new ASTFunCall(exp, args); }
 }

 ASTNode DefFun():
 { Token x, t;
   ASTNode e;
  List<Tuple<String, String >> args = new ArrayList<Tuple<String, String >>();}
{
  <FUN> (
      x = <Id> <FUNTYPE> t = <TYPE> { args.add(new Tuple<String, String>(x.image, t.image)); }
      ("," x = <Id> <FUNTYPE> t = <TYPE> { args.add(new Tuple<String, String>(x.image, t.image)); })*
  )? <ARROWRIGHT> e = SeqE()
  { return new ASTDefFun(args, e); }
}

 ASTNode whileLoop():
 { ASTNode e1, e2; }
 {
     <WHILE> e1 = BoolOps() <DO> e2 = Seq() <END> { return new ASTWhile(e1, e2); }
 }

 ASTNode ifElse():
 { ASTNode e1, e2, e3; }
 {
     <IF> e1 = BoolOps() <THEN> e2 = Seq() <ELSE> e3 = Seq() <END> { return new ASTIfThenElse(e1, e2, e3); }
 }

ASTNode Num():
{ ASTNode e;  Token x;  }
{
    (
    x = <Num> { e = new ASTInt(Integer.parseInt(x.image)); }
    | <MINUS> x = <Num> {e = new ASTInt(-Integer.parseInt(x.image)); } )
    { return e; }
}


 ASTNode Bool() :
 { Token x; }
 {
     x = <BOOL> { return new ASTBool(Boolean.parseBoolean(x.image)); }
 }

 ASTNode Id() :
{ Token x; }
{
    x = <Id> { return new ASTId(x.image); }
}
