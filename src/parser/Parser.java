/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;
import ast.*; import ast.value.*; import ast.operations.arithmetic.*;
import ast.operations.relational.*; import ast.control.*; import ast.operations.references.*;
import ast.functions.*;
import symbols.Tuple; import java.util.List;import java.util.ArrayList;

public class Parser implements ParserConstants {

  final public ASTNode Start() throws ParseException {
  ASTNode e;
    e = SeqE();
    jj_consume_token(EL);
                      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/*ASTNode Seq():
{ ASTNode e1, e2; }
{
    e1 = productionOps()
    [ <SEQ> e2 = Seq() { return new ASTSeq(e1, e2); }]

    { return e1; }
}

//TODO: incomplete and incorrect
ASTNode productionOps():
{ ASTNode e1, e2, e3, e4; }
{
    e1 = logicOps()
    [ <IF> e2 = logicOps() <THEN> e3 = productionOps() <ELSE> e4 = productionOps() <END> { return new ASTIfThenElse(e2, e3, e4); }
    | <WHILE> e2 = logicOps() <DO> e3 = productionOps() <END> { return new ASTWhile(e2, e3); }]
    { return e1; }
}*/
  final public ASTNode SeqE() throws ParseException {
  ASTNode e1, e2;
    e1 = Decl();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIB:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(ATRIB);
      e2 = Decl();
                            e1 =  new ASTReff(e1, e2);
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Decl() throws ParseException {
  ASTNode e, body;
  Token x;
  List<Tuple<String, ASTNode>> vars = new ArrayList<Tuple<String, ASTNode>>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LET:
      jj_consume_token(LET);
      label_2:
      while (true) {
        x = jj_consume_token(Id);
        jj_consume_token(EQUALS);
        e = BoolOps();
             vars.add(new Tuple<String, ASTNode>(x.image, e));
        jj_consume_token(IN);
        body = SeqE();
                                e =  new ASTLet(vars, body);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Id:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
      }
      break;
    case Num:
    case MINUS:
    case LPAR:
    case BOOL:
    case DEREF:
    case IF:
    case NEW:
    case NOT:
    case PRINT:
    case PRINTLN:
    case Id:
      e = BoolOps();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode BoolOps() throws ParseException {
 ASTNode e1, e2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Num:
    case MINUS:
    case LPAR:
    case BOOL:
    case DEREF:
    case IF:
    case NEW:
    case PRINT:
    case PRINTLN:
    case Id:
      e1 = CmpOps();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          jj_consume_token(AND);
          e2 = BoolOps();
                             e1 = new ASTAnd(e1,e2);
          break;
        case OR:
          jj_consume_token(OR);
          e2 = BoolOps();
                            e1 = new ASTOr(e1,e2);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case NOT:
      jj_consume_token(NOT);
      e2 = BoolOps();
                             e1 = new ASTNot(e2);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode CmpOps() throws ParseException {
 ASTNode e1, e2;
    e1 = Expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQREL:
    case GT:
    case GEQT:
    case LT:
    case LEQT:
    case DIFF:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQREL:
        jj_consume_token(EQREL);
        e2 = CmpOps();
                              e1 = new ASTEq(e1,e2);
        break;
      case GT:
        jj_consume_token(GT);
        e2 = CmpOps();
                           e1 = new ASTGt(e1,e2);
        break;
      case GEQT:
        jj_consume_token(GEQT);
        e2 = CmpOps();
                             e1 = new ASTGeq(e1,e2);
        break;
      case LT:
        jj_consume_token(LT);
        e2 = CmpOps();
                           e1 = new ASTLt(e1,e2);
        break;
      case LEQT:
        jj_consume_token(LEQT);
        e2 = CmpOps();
                             e1 = new ASTLeq(e1,e2);
        break;
      case DIFF:
        jj_consume_token(DIFF);
        e2 = CmpOps();
                             e1 = new ASTDiff(e1,e2);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Expr() throws ParseException {
  ASTNode e1, e2;
    e1 = Term();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        e2 = Expr();
                            e1 = new ASTAdd(e1,e2);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        e2 = Expr();
                             e1 = new ASTSub(e1,e2);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
       {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Term() throws ParseException {
  ASTNode e1, e2;
    e1 = Fact();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case DIV:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        jj_consume_token(TIMES);
        e2 = Term();
                             e1 = new ASTMult(e1,e2);
        break;
      case DIV:
        jj_consume_token(DIV);
        e2 = Term();
                           e1 = new ASTDiv(e1,e2);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
       {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Fact() throws ParseException {
  Token x; ASTNode e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEREF:
      jj_consume_token(DEREF);
      e = BoolOps();
                                e = new ASTDRef(e);
      break;
    case PRINT:
      jj_consume_token(PRINT);
      e = BoolOps();
                                  e = new ASTPrint(e);
      break;
    case PRINTLN:
      jj_consume_token(PRINTLN);
      e = BoolOps();
                                    e = new ASTPrintln(e);
      break;
    case IF:
      e = ifElse();
      break;
    case Num:
    case MINUS:
      e = Num();
      break;
    case Id:
      e = Id();
      break;
    case BOOL:
      e = Bool();
      break;
    case LPAR:
      jj_consume_token(LPAR);
      e = SeqE();
      jj_consume_token(RPAR);
      break;
    case NEW:
      jj_consume_token(NEW);
      e = BoolOps();
                                e = new ASTNew(e);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode ifElse() throws ParseException {
   ASTNode e1, e2, e3;
    jj_consume_token(IF);
    e1 = BoolOps();
    jj_consume_token(THEN);
    e2 = SeqE();
    jj_consume_token(ELSE);
    e3 = SeqE();
    jj_consume_token(END);
                                                                       {if (true) return new ASTIfThenElse(e1, e2, e3);}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Num() throws ParseException {
  ASTNode e;  Token x;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Num:
      x = jj_consume_token(Num);
                e = new ASTInt(Integer.parseInt(x.image));
      break;
    case MINUS:
      jj_consume_token(MINUS);
      x = jj_consume_token(Num);
                         e = new ASTInt(-Integer.parseInt(x.image));
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Bool() throws ParseException {
   Token x;
    x = jj_consume_token(BOOL);
                  {if (true) return new ASTBool(Boolean.parseBoolean(x.image));}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode Id() throws ParseException {
  Token x;
    x = jj_consume_token(Id);
               {if (true) return new ASTId(x.image);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x3202250,0xc00000,0xc00000,0x2202250,0x1f8000,0x1f8000,0x60,0x60,0x180,0x180,0x2202250,0x50,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10,0x20,0x2f,0x0,0x0,0x2f,0x0,0x0,0x0,0x0,0x0,0x0,0x2d,0x0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[38];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
